diff --git a/absl/base/BUILD.gn b/absl/base/BUILD.gn
index 9c7d359a..63451034 100644
--- a/absl/base/BUILD.gn
+++ b/absl/base/BUILD.gn
@@ -82,6 +82,10 @@ absl_source_set("config") {
     "options.h",
     "policy_checks.h",
   ]
+  if (current_os == "zos") {
+    public_configs = [ "//third_party/zoslib:zoslib_config" ]
+    deps = [ "//third_party/zoslib:zoslib" ]
+  }
 }
 
 absl_source_set("cycleclock_internal") {
diff --git a/absl/base/config.h b/absl/base/config.h
index 97c9a22a..ddcb901f 100644
--- a/absl/base/config.h
+++ b/absl/base/config.h
@@ -282,7 +282,7 @@ static_assert(ABSL_INTERNAL_INLINE_NAMESPACE_STR[0] != 'h' ||
 // supported.
 #ifdef ABSL_HAVE_THREAD_LOCAL
 #error ABSL_HAVE_THREAD_LOCAL cannot be directly set
-#else
+#elif !defined(__MVS__)
 #define ABSL_HAVE_THREAD_LOCAL 1
 #endif
 
@@ -380,7 +380,7 @@ static_assert(ABSL_INTERNAL_INLINE_NAMESPACE_STR[0] != 'h' ||
     defined(__asmjs__) || defined(__EMSCRIPTEN__) || defined(__Fuchsia__) || \
     defined(__sun) || defined(__myriad2__) || defined(__HAIKU__) ||          \
     defined(__OpenBSD__) || defined(__NetBSD__) || defined(__QNX__) ||       \
-    defined(__VXWORKS__) || defined(__hexagon__)
+    defined(__VXWORKS__) || defined(__hexagon__) || defined(__MVS__)
 #define ABSL_HAVE_MMAP 1
 #endif
 
diff --git a/absl/base/internal/direct_mmap.h b/absl/base/internal/direct_mmap.h
index 1beb2ee4..77b29fb2 100644
--- a/absl/base/internal/direct_mmap.h
+++ b/absl/base/internal/direct_mmap.h
@@ -19,6 +19,9 @@
 #define ABSL_BASE_INTERNAL_DIRECT_MMAP_H_
 
 #include "absl/base/config.h"
+#ifdef __MVS__
+#include "../../third_party/zoslib/include/zos-base.h"
+#endif
 
 #ifdef ABSL_HAVE_MMAP
 
diff --git a/absl/base/internal/low_level_alloc.cc b/absl/base/internal/low_level_alloc.cc
index a563f7b9..cb5c39bd 100644
--- a/absl/base/internal/low_level_alloc.cc
+++ b/absl/base/internal/low_level_alloc.cc
@@ -28,6 +28,10 @@
 #include "absl/base/macros.h"
 #include "absl/base/thread_annotations.h"
 
+#ifdef __MVS__
+#include "../../third_party/zoslib/include/zos-base.h"
+#endif
+
 // LowLevelAlloc requires that the platform support low-level
 // allocation of virtual memory. Platforms lacking this cannot use
 // LowLevelAlloc.
@@ -552,6 +556,9 @@ static void *DoAllocWithArena(size_t request, LowLevelAlloc::Arena *arena) {
       new_pages = VirtualAlloc(nullptr, new_pages_size,
                                MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
       ABSL_RAW_CHECK(new_pages != nullptr, "VirtualAlloc failed");
+#elif defined(__MVS__) && !defined(MAP_ANONYMOUS)
+      // TODO(gabylb): zos - undo when MAP_ANONYMOUS is supported:
+      new_pages = __zalloc(new_pages_size, arena->pagesize);
 #else
 #ifndef ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING
       if ((arena->flags & LowLevelAlloc::kAsyncSignalSafe) != 0) {
diff --git a/absl/base/internal/poison.cc b/absl/base/internal/poison.cc
index b33d4c2d..1d76c373 100644
--- a/absl/base/internal/poison.cc
+++ b/absl/base/internal/poison.cc
@@ -35,6 +35,10 @@
 #include <windows.h>
 #endif
 
+#ifdef __MVS__
+#include "../../third_party/zoslib/include/zos-base.h"
+#endif
+
 namespace absl {
 ABSL_NAMESPACE_BEGIN
 namespace base_internal {
@@ -63,6 +67,10 @@ void* InitializePoisonedPointerInternal() {
 #elif defined(ABSL_HAVE_MEMORY_SANITIZER)
   void* data = malloc(block_size);
   __msan_poison(data, block_size);
+#elif defined(__MVS__) && !defined(MAP_ANONYMOUS)
+  // TODO(gabylb): zos - undo when MAP_ANONYMOUS is supported:
+  void *data = __zalloc(block_size, block_size);
+  if (data == MAP_FAILED) return GetBadPointerInternal();
 #elif defined(ABSL_HAVE_MMAP)
   void* data = DirectMmap(nullptr, block_size, PROT_NONE,
                           MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
diff --git a/absl/base/internal/sysinfo.cc b/absl/base/internal/sysinfo.cc
index 79eaba3e..5e00d84a 100644
--- a/absl/base/internal/sysinfo.cc
+++ b/absl/base/internal/sysinfo.cc
@@ -467,7 +467,11 @@ pid_t GetTID() {
 pid_t GetTID() {
   // `pthread_t` need not be arithmetic per POSIX; platforms where it isn't
   // should be handled above.
+#ifdef __MVS__
+  return static_cast<pid_t>(pthread_self().__);
+#else
   return static_cast<pid_t>(pthread_self());
+#endif
 }
 
 #endif
diff --git a/absl/debugging/failure_signal_handler.cc b/absl/debugging/failure_signal_handler.cc
index 570d1e50..71665c8d 100644
--- a/absl/debugging/failure_signal_handler.cc
+++ b/absl/debugging/failure_signal_handler.cc
@@ -33,6 +33,9 @@
 #include <sys/mman.h>
 #if defined(MAP_ANON) && !defined(MAP_ANONYMOUS)
 #define MAP_ANONYMOUS MAP_ANON
+// TODO(gabylb): zos - undo when supported:
+#elif defined(__MVS__) && !defined(MAP_ANONYMOUS)
+#define MAP_ANONYMOUS 0
 #endif
 #endif
 
diff --git a/absl/debugging/internal/examine_stack.cc b/absl/debugging/internal/examine_stack.cc
index 3dd6ba1a..2714e2e1 100644
--- a/absl/debugging/internal/examine_stack.cc
+++ b/absl/debugging/internal/examine_stack.cc
@@ -21,11 +21,17 @@
 #endif
 
 #include "absl/base/config.h"
+#ifdef __MVS__
+#include "../../third_party/zoslib/include/zos-base.h"
+#endif
 
 #ifdef ABSL_HAVE_MMAP
 #include <sys/mman.h>
 #if defined(MAP_ANON) && !defined(MAP_ANONYMOUS)
 #define MAP_ANONYMOUS MAP_ANON
+// TODO(gabylb): zos - undo when supported:
+#elif defined(__MVS__) && !defined(MAP_ANONYMOUS)
+#define MAP_ANONYMOUS 0
 #endif
 #endif
 
diff --git a/absl/debugging/internal/stack_consumption.cc b/absl/debugging/internal/stack_consumption.cc
index b54a1b28..47c5431e 100644
--- a/absl/debugging/internal/stack_consumption.cc
+++ b/absl/debugging/internal/stack_consumption.cc
@@ -24,6 +24,9 @@
 
 #include "absl/base/attributes.h"
 #include "absl/base/internal/raw_logging.h"
+#ifdef __MVS__
+#include "../../third_party/zoslib/include/zos-base.h"
+#endif
 
 #if defined(MAP_ANON) && !defined(MAP_ANONYMOUS)
 #define MAP_ANONYMOUS MAP_ANON
diff --git a/absl/log/internal/log_sink_set.cc b/absl/log/internal/log_sink_set.cc
index 3d5c6995..1e96d0d7 100644
--- a/absl/log/internal/log_sink_set.cc
+++ b/absl/log/internal/log_sink_set.cc
@@ -59,8 +59,12 @@ bool& ThreadIsLoggingStatus() {
 #ifdef ABSL_HAVE_THREAD_LOCAL
   ABSL_CONST_INIT thread_local bool thread_is_logging = false;
   return thread_is_logging;
+#else
+#ifdef __MVS__
+  ABSL_CONST_INIT static pthread_key_t thread_is_logging_key = {0};
 #else
   ABSL_CONST_INIT static pthread_key_t thread_is_logging_key;
+#endif
   static const bool unused = [] {
     if (pthread_key_create(&thread_is_logging_key, [](void* data) {
           delete reinterpret_cast<bool*>(data);
diff --git a/absl/log/internal/test_helpers.cc b/absl/log/internal/test_helpers.cc
index bfcc9679..8b774b5d 100644
--- a/absl/log/internal/test_helpers.cc
+++ b/absl/log/internal/test_helpers.cc
@@ -16,6 +16,8 @@
 
 #ifdef __Fuchsia__
 #include <zircon/syscalls.h>
+#elif defined(__MVS__)
+#include <signal.h> // for SIGABRT
 #endif
 
 #include "gtest/gtest.h"
diff --git a/absl/synchronization/internal/kernel_timeout.cc b/absl/synchronization/internal/kernel_timeout.cc
index 48ea6287..55bb9d36 100644
--- a/absl/synchronization/internal/kernel_timeout.cc
+++ b/absl/synchronization/internal/kernel_timeout.cc
@@ -148,7 +148,7 @@ struct timespec KernelTimeout::MakeRelativeTimespec() const {
   return absl::ToTimespec(absl::Nanoseconds(InNanosecondsFromNow()));
 }
 
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
 struct timespec KernelTimeout::MakeClockAbsoluteTimespec(clockid_t c) const {
   if (!has_timeout()) {
     return absl::ToTimespec(absl::Nanoseconds(kMaxNanos));
diff --git a/absl/synchronization/internal/kernel_timeout.h b/absl/synchronization/internal/kernel_timeout.h
index 06404a75..4194721d 100644
--- a/absl/synchronization/internal/kernel_timeout.h
+++ b/absl/synchronization/internal/kernel_timeout.h
@@ -82,7 +82,7 @@ class KernelTimeout {
   // this method in the case of a spurious wakeup.
   struct timespec MakeRelativeTimespec() const;
 
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   // Convert to `struct timespec` for interfaces that expect an absolute timeout
   // on a specific clock `c`. This is similar to `MakeAbsTimespec()`, but
   // callers usually want to use this method with `CLOCK_MONOTONIC` when
diff --git a/absl/synchronization/internal/kernel_timeout_test.cc b/absl/synchronization/internal/kernel_timeout_test.cc
index 33962f86..cd3ef354 100644
--- a/absl/synchronization/internal/kernel_timeout_test.cc
+++ b/absl/synchronization/internal/kernel_timeout_test.cc
@@ -87,7 +87,7 @@ TEST(KernelTimeout, DISABLED_FiniteTimes) {
     EXPECT_TRUE(t.is_absolute_timeout());
     EXPECT_FALSE(t.is_relative_timeout());
     EXPECT_EQ(absl::TimeFromTimespec(t.MakeAbsTimespec()), when);
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
     EXPECT_LE(
         absl::AbsDuration(absl::Now() + duration -
                           absl::TimeFromTimespec(
@@ -119,7 +119,7 @@ TEST(KernelTimeout, InfiniteFuture) {
   // absl::InfiniteFuture(), but we should return a very large value.
   EXPECT_GT(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::Now() + absl::Hours(100000));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_GT(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::Now() + absl::Hours(100000));
 #endif
@@ -144,7 +144,7 @@ TEST(KernelTimeout, DefaultConstructor) {
   // absl::InfiniteFuture(), but we should return a very large value.
   EXPECT_GT(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::Now() + absl::Hours(100000));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_GT(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::Now() + absl::Hours(100000));
 #endif
@@ -169,7 +169,7 @@ TEST(KernelTimeout, TimeMaxNanos) {
   // absl::InfiniteFuture(), but we should return a very large value.
   EXPECT_GT(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::Now() + absl::Hours(100000));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_GT(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::Now() + absl::Hours(100000));
 #endif
@@ -194,7 +194,7 @@ TEST(KernelTimeout, Never) {
   // absl::InfiniteFuture(), but we should return a very large value.
   EXPECT_GT(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::Now() + absl::Hours(100000));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_GT(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::Now() + absl::Hours(100000));
 #endif
@@ -216,7 +216,7 @@ TEST(KernelTimeout, InfinitePast) {
   EXPECT_FALSE(t.is_relative_timeout());
   EXPECT_LE(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::FromUnixNanos(1));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_LE(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::FromUnixSeconds(1));
 #endif
@@ -251,7 +251,7 @@ TEST(KernelTimeout, DISABLED_FiniteDurations) {
     EXPECT_LE(absl::AbsDuration(absl::Now() + duration -
                                 absl::TimeFromTimespec(t.MakeAbsTimespec())),
               absl::Milliseconds(5));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
     EXPECT_LE(
         absl::AbsDuration(absl::Now() + duration -
                           absl::TimeFromTimespec(
@@ -300,7 +300,7 @@ TEST(KernelTimeout, DISABLED_NegativeDurations) {
     EXPECT_LE(absl::AbsDuration(absl::Now() -
                                 absl::TimeFromTimespec(t.MakeAbsTimespec())),
               absl::Milliseconds(5));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
     EXPECT_LE(absl::AbsDuration(absl::Now() - absl::TimeFromTimespec(
                                                   t.MakeClockAbsoluteTimespec(
                                                       CLOCK_REALTIME))),
@@ -328,7 +328,7 @@ TEST(KernelTimeout, InfiniteDuration) {
   // absl::InfiniteFuture(), but we should return a very large value.
   EXPECT_GT(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::Now() + absl::Hours(100000));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_GT(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::Now() + absl::Hours(100000));
 #endif
@@ -353,7 +353,7 @@ TEST(KernelTimeout, DurationMaxNanos) {
   // absl::InfiniteFuture(), but we should return a very large value.
   EXPECT_GT(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::Now() + absl::Hours(100000));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_GT(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::Now() + absl::Hours(100000));
 #endif
@@ -378,7 +378,7 @@ TEST(KernelTimeout, OverflowNanos) {
   // Timeouts should still be far in the future.
   EXPECT_GT(absl::TimeFromTimespec(t.MakeAbsTimespec()),
             absl::Now() + absl::Hours(100000));
-#ifndef _WIN32
+#if !defined(_WIN32) && (!defined(__MVS__) || __EDC_TARGET > 0x42050000)
   EXPECT_GT(absl::TimeFromTimespec(t.MakeClockAbsoluteTimespec(CLOCK_REALTIME)),
             absl::Now() + absl::Hours(100000));
 #endif
diff --git a/absl/time/clock_test.cc b/absl/time/clock_test.cc
index bc77dbc2..0ebfed6e 100644
--- a/absl/time/clock_test.cc
+++ b/absl/time/clock_test.cc
@@ -18,8 +18,8 @@
 #if defined(ABSL_HAVE_ALARM)
 #include <signal.h>
 #include <unistd.h>
-#ifdef _AIX
-// sig_t is not defined in AIX.
+#if defined(_AIX) || defined(__MVS__)
+// sig_t is not defined in AIX and z/OS.
 typedef void (*sig_t)(int);
 #endif
 #elif defined(__linux__) || defined(__APPLE__)
diff --git a/absl/time/internal/cctz/src/time_zone_libc.cc b/absl/time/internal/cctz/src/time_zone_libc.cc
index b5094027..b22fbecd 100644
--- a/absl/time/internal/cctz/src/time_zone_libc.cc
+++ b/absl/time/internal/cctz/src/time_zone_libc.cc
@@ -31,6 +31,8 @@
 extern "C" {
 extern long altzone;
 }
+#elif defined(__MVS__)
+time_t altzone = 0;
 #endif
 
 namespace absl {
@@ -50,7 +52,7 @@ auto tm_zone(const std::tm& tm) -> decltype(_tzname[0]) {
   const bool is_dst = tm.tm_isdst > 0;
   return _tzname[is_dst];
 }
-#elif defined(__sun) || defined(_AIX)
+#elif defined(__sun) || defined(_AIX) || defined(__MVS__)
 // Uses the globals: 'timezone', 'altzone' and 'tzname'.
 auto tm_gmtoff(const std::tm& tm) -> decltype(timezone) {
   const bool is_dst = tm.tm_isdst > 0;
diff --git a/absl/time/internal/get_current_time_posix.inc b/absl/time/internal/get_current_time_posix.inc
index 42072000..65a0d508 100644
--- a/absl/time/internal/get_current_time_posix.inc
+++ b/absl/time/internal/get_current_time_posix.inc
@@ -5,6 +5,10 @@
 #include <cstdint>
 
 #include "absl/base/internal/raw_logging.h"
+#ifdef __MVS__
+// TODO(gabylb): zos - for clock_gettime on z/OS < 3.1.
+#include "../../third_party/zoslib/include/zos-base.h"
+#endif
 
 namespace absl {
 ABSL_NAMESPACE_BEGIN
