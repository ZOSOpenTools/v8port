diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index de1cd6efc..341d72163 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -1882,6 +1882,13 @@ config("default_warnings") {
           # TODO(https://crbug.com/1490607): Fix and re-enable.
           "-Wno-thread-safety-reference-return",
         ]
+        if (current_os == "zos") {
+          # Currently not supported on z/OS clang:
+          cflags -= [
+            "-Wno-deprecated-builtins",
+            "-Wno-thread-safety-reference-return",
+          ]
+        }
       }
     }
 
@@ -2696,7 +2703,8 @@ config("symbols") {
     }
 
     # On aix -gdwarf causes linker failures due to thread_local variables.
-    if (!is_nacl && current_os != "aix") {
+    # On zos -gdwarf-4 causes INSUFFICIENT ABOVE THE LINE STORAGE WAS AVAILABLE.
+    if (!is_nacl && current_os != "aix" && current_os != "zos") {
       if (use_dwarf5) {
         cflags += [ "-gdwarf-5" ]
         rustflags += [ "-Zdwarf-version=5" ]
diff --git a/config/zos/BUILD.gn b/config/zos/BUILD.gn
index 082ac1d38..30719c10d 100644
--- a/config/zos/BUILD.gn
+++ b/config/zos/BUILD.gn
@@ -10,10 +10,10 @@ import("//build/toolchain/toolchain.gni")
 
 config("compiler") {
   defines = [
+    "ZOSLIB_OVERRIDE_CLIB",
     "_AE_BIMODAL=1",
     "_ALL_SOURCE",
     "_ENHANCED_ASCII_EXT=0xFFFFFFFF",
-    "_Export=extern",
     "_LARGE_TIME_API",
     "_OPEN_MSGQ_EXT",
     "_OPEN_SYS_FILE_EXT=1",
@@ -23,33 +23,23 @@ config("compiler") {
     "_UNIX03_WITHDRAWN",
     "_XOPEN_SOURCE=600",
     "_XOPEN_SOURCE_EXTENDED",
-    "__static_assert=static_assert",
     "PATH_MAX=1024",
   ]
 
   cflags = [
-    "-q64",
-    "-qASCII",
-    "-Wc,DLL",
-    "-Wa,GOFF",
-    "-qENUM=INT",
-    "-qEXPORTALL",
-    "-qASM",
-    "-qmakedep",
-    "-qARCH=10",
-    "-qTUNE=10",
-    "-qasmlib=sys1.maclib:sys1.modgen",
-    "-qfloat=IEEE",
-    "-qlibansi",
-    "-qgonumber",
-    "-qlongname",
+    "-faligned-allocation",
+    "-fno-short-enums",
+    "-fzos-le-char-mode=ascii",
+    "-march=arch10",
+    "-mzos-target=zosv2r4",
   ]
 
   cflags_cc = [
   ]
 
   asmflags = [
-    "-Wa,GOFF",
+    "-Wa,-mGOFF",
+    "-fno-integrated-as",
   ]
 
   ldflags = [
diff --git a/toolchain/toolchain.gni b/toolchain/toolchain.gni
index 23ec903ad..734ba8a7c 100644
--- a/toolchain/toolchain.gni
+++ b/toolchain/toolchain.gni
@@ -72,7 +72,7 @@ if (host_os == "mac") {
   host_shlib_extension = ".dylib"
 } else if (host_os == "win") {
   host_shlib_extension = ".dll"
-} else if (host_os == "linux" || host_os == "aix") {
+} else if (host_os == "linux" || host_os == "aix" || host_os == "zos") {
   host_shlib_extension = ".so"
 } else {
   assert(false, "Host platform not supported")
diff --git a/toolchain/zos/BUILD.gn b/toolchain/zos/BUILD.gn
index 3af5f8033..20eef2caf 100644
--- a/toolchain/zos/BUILD.gn
+++ b/toolchain/zos/BUILD.gn
@@ -7,9 +7,9 @@
 import("//build/toolchain/gcc_toolchain.gni")
 
 toolchain("s390x") {
-  cc = "xlclang"
-  cxx = "xlclang++"
-  asm = "xlclang"
+  cc = "clang"
+  cxx = "clang++"
+  asm = "clang"
   ar = "ar"
   ld = cxx
 
@@ -36,7 +36,7 @@ toolchain("s390x") {
 
   tool("cc") {
     depfile = "{{output}}.d"
-    command = "$cc -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}${extra_cflags} -c {{source}} -o {{output}}"
+    command = "$cc -MMD -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}${extra_cflags} -c {{source}} -o {{output}}"
     depsformat = "gcc"
     description = "CC {{output}}"
     outputs = [ "$object_subdir/{{source_name_part}}.o" ]
@@ -44,7 +44,7 @@ toolchain("s390x") {
 
   tool("cxx") {
     depfile = "{{output}}.d"
-    command = "$cxx -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}${extra_cppflags}${extra_cxxflags} -c {{source}} -o {{output}}"
+    command = "$cxx -MMD -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}${extra_cppflags}${extra_cxxflags} -c {{source}} -o {{output}}"
     depsformat = "gcc"
     description = "CXX {{output}}"
     outputs = [ "$object_subdir/{{source_name_part}}.o" ]
@@ -53,7 +53,7 @@ toolchain("s390x") {
   tool("asm") {
     # Just use the C compiler to compile assembly.
     depfile = "{{output}}.d"
-    command = "$asm -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{asmflags}}${extra_asmflags} -c {{source}} -o {{output}}"
+    command = "$asm ${rebuild_string} {{asmflags}}${extra_asmflags} -c {{source}} -o {{output}}"
     depsformat = "gcc"
     description = "ASM {{output}}"
     outputs = [ "$object_subdir/{{source_name_part}}.o" ]
@@ -88,7 +88,7 @@ toolchain("s390x") {
     # implement (1) linking to produce a .so, (2) extracting the symbols
     # from that file (3) if the extracted list differs from the existing
     # .TOC file, overwrite it, otherwise, don't change it.
-    link_command = "$ld -Wl,DLL {{ldflags}}${extra_ldflags} -o \"$sofile\" `cat $rspfile`"
+    link_command = "$ld -Wl,-x${xfile} {{ldflags}}${extra_ldflags} -o \"$sofile\" `cat $rspfile`"
 
     solink_wrapper =
       rebase_path("//build/toolchain/gcc_link_wrapper.py", root_build_dir)
